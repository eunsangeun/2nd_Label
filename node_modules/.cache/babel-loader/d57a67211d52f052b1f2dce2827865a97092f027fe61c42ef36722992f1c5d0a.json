{"ast":null,"code":"var _jsxFileName = \"/Users/gainlee/Desktop/gdsc_2ndlabel/2ndlabel/src/pages/ApplicationForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Calendar from \"react-calendar\";\n// import \"react-calendar/dist/Calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Getlist(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"what needs to be done?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"download\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n_c = Getlist;\nfunction Clalendar(props) {\n  _s();\n  const [Dated, setdate] = useState(new Date());\n  const onchange = date => setdate(date);\n  return /*#__PURE__*/_jsxDEV(Calendar, {\n    className: \"calender\",\n    onChange: onchange,\n    value: Dated\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n// import React, { useState } from \"react\";\n\n// // CalendarProps 인터페이스 정의\n// interface CalendarProps {\n//     selectedDay: Date | null;\n//     setSelectedDay: (day: Date | null) => void;\n//     isPrevMonth: boolean;\n//     isNextMonth: boolean;\n// }\n\n// // Calendar 컴포넌트 정의\n// const Calendar = ({\n//     selectedDay,\n//     setSelectedDay,\n//     isPrevMonth,\n//     isNextMonth,\n// }: CalendarProps) => {\n//     const daysOfWeek = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\n//     const [currentMonth, setCurrentMonth] = useState(new Date());\n\n//     const today = new Date();\n//     today.setHours(0, 0, 0, 0);\n\n//     const isSameDay = (toDay: Date, compareDay?: Date | null) => {\n//         if (\n//             toDay.getFullYear() === compareDay?.getFullYear() &&\n//             toDay.getMonth() === compareDay?.getMonth() &&\n//             toDay.getDate() === compareDay?.getDate()\n//         ) {\n//             return true;\n//         }\n//         return false;\n//     };\n\n//     const onClickDay = (day: Date) => {\n//         if (isSameDay(day, selectedDay)) {\n//             setSelectedDay(null);\n//         } else {\n//             setSelectedDay(day);\n//         }\n//     };\n\n//     const prevCalendar = () => {\n//         setCurrentMonth(\n//             new Date(\n//                 currentMonth.getFullYear(),\n//                 currentMonth.getMonth() - 1,\n//                 currentMonth.getDate()\n//             )\n//         );\n//     };\n\n//     const nextCalendar = () => {\n//         setCurrentMonth(\n//             new Date(\n//                 currentMonth.getFullYear(),\n//                 currentMonth.getMonth() + 1,\n//                 currentMonth.getDate()\n//             )\n//         );\n//     };\n\n//     const buildCalendarDays = () => {\n//         const curMonthStartDate = new Date(\n//             currentMonth.getFullYear(),\n//             currentMonth.getMonth(),\n//             1\n//         ).getDay();\n//         const curMonthEndDate = new Date(\n//             currentMonth.getFullYear(),\n//             currentMonth.getMonth() + 1,\n//             0\n//         );\n//         const prevMonthEndDate = new Date(\n//             currentMonth.getFullYear(),\n//             currentMonth.getMonth(),\n//             0\n//         );\n//         const nextMonthStartDate = new Date(\n//             currentMonth.getFullYear(),\n//             currentMonth.getMonth() + 1,\n//             1\n//         );\n//         const days: Date[] = Array.from(\n//             { length: curMonthStartDate },\n//             (_, i) => {\n//                 return new Date(\n//                     currentMonth.getFullYear(),\n//                     currentMonth.getMonth() - 1,\n//                     prevMonthEndDate.getDate() - i\n//                 );\n//             }\n//         ).reverse();\n\n//         days.push(\n//             ...Array.from(\n//                 { length: curMonthEndDate.getDate() },\n//                 (_, i) =>\n//                     new Date(\n//                         currentMonth.getFullYear(),\n//                         currentMonth.getMonth(),\n//                         i + 1\n//                     )\n//             )\n//         );\n\n//         const remainingDays = 7 - (days.length % 7);\n//         if (remainingDays < 7) {\n//             days.push(\n//                 ...Array.from(\n//                     { length: remainingDays },\n//                     (_, i) =>\n//                         new Date(\n//                             nextMonthStartDate.getFullYear(),\n//                             nextMonthStartDate.getMonth(),\n//                             i + 1\n//                         )\n//                 )\n//             );\n//         }\n//         return days;\n//     };\n\n//     const buildCalendarTag = (calendarDays: Date[]) => {\n//         return calendarDays.map((day: Date, i: number) => {\n//             if (day.getMonth() < currentMonth.getMonth()) {\n//                 return (\n//                     <td key={i} className=\"prevMonthDay\">\n//                         {isPrevMonth ? day.getDate() : \"\"}\n//                     </td>\n//                 );\n//             }\n//             if (day.getMonth() > currentMonth.getMonth()) {\n//                 return (\n//                     <td key={i} className=\"nextMonthDay\">\n//                         {isNextMonth ? day.getDate() : \"\"}\n//                     </td>\n//                 );\n//             }\n//             if (day < today) {\n//                 return (\n//                     <td key={i} className=\"prevDay\">\n//                         {day.getDate()}\n//                     </td>\n//                 );\n//             }\n//             return (\n//                 <td\n//                     key={i}\n//                     className={`futureDay ${\n//                         isSameDay(day, selectedDay) && \"choiceDay\"\n//                     }`}\n//                     onClick={() => onClickDay(day)}>\n//                     {day.getDate()}\n//                 </td>\n//             );\n//         });\n//     };\n\n//     const divideWeek = (calendarTags: JSX.Element[]) => {\n//         return calendarTags.reduce(\n//             (acc: JSX.Element[][], day: JSX.Element, i: number) => {\n//                 if (i % 7 === 0) acc.push([day]);\n//                 else acc[acc.length - 1].push(day);\n//                 return acc;\n//             },\n//             []\n//         );\n//     };\n\n//     const calendarDays = buildCalendarDays();\n//     const calendarTags = buildCalendarTag(calendarDays);\n//     const calendarRows = divideWeek(calendarTags);\n\n//     return (\n//         <div className=\"calendar\">\n//             <div className=\"calendarNav\"></div>\n//             <table>\n//                 <thead></thead>\n//                 <tbody>\n//                     {calendarRows.map((row, i) => (\n//                         <tr key={i}>{row}</tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );\n// };\n\n// // ApplicationForm 컴포넌트 정의 및 export\n// export default function ApplicationForm() {\n//     const [selectedDay, setSelectedDay] = (useState < Date) | (null > null);\n\n//     const isPrevMonth = true; // 이 값은 예시이며, 실제 로직에 따라 변경될 수 있습니다.\n//     const isNextMonth = true; // 이 값도 예시입니다.\n\n//     return (\n//         <div className=\"page-container\" style={{ fontSize: \"32px\" }}>\n//             기부신청서 화면입니다.\n//             <Calendar\n//                 selectedDay={selectedDay}\n//                 setSelectedDay={setSelectedDay}\n//                 isPrevMonth={isPrevMonth}\n//                 isNextMonth={isNextMonth}\n//             />\n//         </div>\n//     );\n// }\n_s(Clalendar, \"JaEo2BoPqBok5UlWFCXzZZkL+BI=\");\n_c2 = Clalendar;\nvar _c, _c2;\n$RefreshReg$(_c, \"Getlist\");\n$RefreshReg$(_c2, \"Clalendar\");","map":{"version":3,"names":["React","useState","Calendar","jsxDEV","_jsxDEV","Getlist","props","children","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","Clalendar","_s","Dated","setdate","Date","onchange","date","className","onChange","value","_c2","$RefreshReg$"],"sources":["/Users/gainlee/Desktop/gdsc_2ndlabel/2ndlabel/src/pages/ApplicationForm.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Calendar from \"react-calendar\";\n// import \"react-calendar/dist/Calendar.css\";\n\nfunction Getlist(props) {\n    return (\n        <div>\n            <input type=\"text\" placeholder=\"what needs to be done?\" />\n            <button>download</button>\n        </div>\n    );\n}\n\nfunction Clalendar(props) {\n    const [Dated, setdate] = useState(new Date());\n    const onchange = (date) => setdate(date);\n    return (\n        <Calendar className={\"calender\"} onChange={onchange} value={Dated} />\n    );\n}\n\n// import React, { useState } from \"react\";\n\n// // CalendarProps 인터페이스 정의\n// interface CalendarProps {\n//     selectedDay: Date | null;\n//     setSelectedDay: (day: Date | null) => void;\n//     isPrevMonth: boolean;\n//     isNextMonth: boolean;\n// }\n\n// // Calendar 컴포넌트 정의\n// const Calendar = ({\n//     selectedDay,\n//     setSelectedDay,\n//     isPrevMonth,\n//     isNextMonth,\n// }: CalendarProps) => {\n//     const daysOfWeek = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\n//     const [currentMonth, setCurrentMonth] = useState(new Date());\n\n//     const today = new Date();\n//     today.setHours(0, 0, 0, 0);\n\n//     const isSameDay = (toDay: Date, compareDay?: Date | null) => {\n//         if (\n//             toDay.getFullYear() === compareDay?.getFullYear() &&\n//             toDay.getMonth() === compareDay?.getMonth() &&\n//             toDay.getDate() === compareDay?.getDate()\n//         ) {\n//             return true;\n//         }\n//         return false;\n//     };\n\n//     const onClickDay = (day: Date) => {\n//         if (isSameDay(day, selectedDay)) {\n//             setSelectedDay(null);\n//         } else {\n//             setSelectedDay(day);\n//         }\n//     };\n\n//     const prevCalendar = () => {\n//         setCurrentMonth(\n//             new Date(\n//                 currentMonth.getFullYear(),\n//                 currentMonth.getMonth() - 1,\n//                 currentMonth.getDate()\n//             )\n//         );\n//     };\n\n//     const nextCalendar = () => {\n//         setCurrentMonth(\n//             new Date(\n//                 currentMonth.getFullYear(),\n//                 currentMonth.getMonth() + 1,\n//                 currentMonth.getDate()\n//             )\n//         );\n//     };\n\n//     const buildCalendarDays = () => {\n//         const curMonthStartDate = new Date(\n//             currentMonth.getFullYear(),\n//             currentMonth.getMonth(),\n//             1\n//         ).getDay();\n//         const curMonthEndDate = new Date(\n//             currentMonth.getFullYear(),\n//             currentMonth.getMonth() + 1,\n//             0\n//         );\n//         const prevMonthEndDate = new Date(\n//             currentMonth.getFullYear(),\n//             currentMonth.getMonth(),\n//             0\n//         );\n//         const nextMonthStartDate = new Date(\n//             currentMonth.getFullYear(),\n//             currentMonth.getMonth() + 1,\n//             1\n//         );\n//         const days: Date[] = Array.from(\n//             { length: curMonthStartDate },\n//             (_, i) => {\n//                 return new Date(\n//                     currentMonth.getFullYear(),\n//                     currentMonth.getMonth() - 1,\n//                     prevMonthEndDate.getDate() - i\n//                 );\n//             }\n//         ).reverse();\n\n//         days.push(\n//             ...Array.from(\n//                 { length: curMonthEndDate.getDate() },\n//                 (_, i) =>\n//                     new Date(\n//                         currentMonth.getFullYear(),\n//                         currentMonth.getMonth(),\n//                         i + 1\n//                     )\n//             )\n//         );\n\n//         const remainingDays = 7 - (days.length % 7);\n//         if (remainingDays < 7) {\n//             days.push(\n//                 ...Array.from(\n//                     { length: remainingDays },\n//                     (_, i) =>\n//                         new Date(\n//                             nextMonthStartDate.getFullYear(),\n//                             nextMonthStartDate.getMonth(),\n//                             i + 1\n//                         )\n//                 )\n//             );\n//         }\n//         return days;\n//     };\n\n//     const buildCalendarTag = (calendarDays: Date[]) => {\n//         return calendarDays.map((day: Date, i: number) => {\n//             if (day.getMonth() < currentMonth.getMonth()) {\n//                 return (\n//                     <td key={i} className=\"prevMonthDay\">\n//                         {isPrevMonth ? day.getDate() : \"\"}\n//                     </td>\n//                 );\n//             }\n//             if (day.getMonth() > currentMonth.getMonth()) {\n//                 return (\n//                     <td key={i} className=\"nextMonthDay\">\n//                         {isNextMonth ? day.getDate() : \"\"}\n//                     </td>\n//                 );\n//             }\n//             if (day < today) {\n//                 return (\n//                     <td key={i} className=\"prevDay\">\n//                         {day.getDate()}\n//                     </td>\n//                 );\n//             }\n//             return (\n//                 <td\n//                     key={i}\n//                     className={`futureDay ${\n//                         isSameDay(day, selectedDay) && \"choiceDay\"\n//                     }`}\n//                     onClick={() => onClickDay(day)}>\n//                     {day.getDate()}\n//                 </td>\n//             );\n//         });\n//     };\n\n//     const divideWeek = (calendarTags: JSX.Element[]) => {\n//         return calendarTags.reduce(\n//             (acc: JSX.Element[][], day: JSX.Element, i: number) => {\n//                 if (i % 7 === 0) acc.push([day]);\n//                 else acc[acc.length - 1].push(day);\n//                 return acc;\n//             },\n//             []\n//         );\n//     };\n\n//     const calendarDays = buildCalendarDays();\n//     const calendarTags = buildCalendarTag(calendarDays);\n//     const calendarRows = divideWeek(calendarTags);\n\n//     return (\n//         <div className=\"calendar\">\n//             <div className=\"calendarNav\"></div>\n//             <table>\n//                 <thead></thead>\n//                 <tbody>\n//                     {calendarRows.map((row, i) => (\n//                         <tr key={i}>{row}</tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );\n// };\n\n// // ApplicationForm 컴포넌트 정의 및 export\n// export default function ApplicationForm() {\n//     const [selectedDay, setSelectedDay] = (useState < Date) | (null > null);\n\n//     const isPrevMonth = true; // 이 값은 예시이며, 실제 로직에 따라 변경될 수 있습니다.\n//     const isNextMonth = true; // 이 값도 예시입니다.\n\n//     return (\n//         <div className=\"page-container\" style={{ fontSize: \"32px\" }}>\n//             기부신청서 화면입니다.\n//             <Calendar\n//                 selectedDay={selectedDay}\n//                 setSelectedDay={setSelectedDay}\n//                 isPrevMonth={isPrevMonth}\n//                 isNextMonth={isNextMonth}\n//             />\n//         </div>\n//     );\n// }\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,OAAOA,CAACC,KAAK,EAAE;EACpB,oBACIF,OAAA;IAAAG,QAAA,gBACIH,OAAA;MAAOI,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1DT,OAAA;MAAAG,QAAA,EAAQ;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEd;AAACC,EAAA,GAPQT,OAAO;AAShB,SAASU,SAASA,CAACT,KAAK,EAAE;EAAAU,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,IAAIkB,IAAI,CAAC,CAAC,CAAC;EAC7C,MAAMC,QAAQ,GAAIC,IAAI,IAAKH,OAAO,CAACG,IAAI,CAAC;EACxC,oBACIjB,OAAA,CAACF,QAAQ;IAACoB,SAAS,EAAE,UAAW;IAACC,QAAQ,EAAEH,QAAS;IAACI,KAAK,EAAEP;EAAM;IAAAP,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE7E;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAG,EAAA,CAvNSD,SAAS;AAAAU,GAAA,GAATV,SAAS;AAAA,IAAAD,EAAA,EAAAW,GAAA;AAAAC,YAAA,CAAAZ,EAAA;AAAAY,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}